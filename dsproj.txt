9
photo = df[df['Type'] == "Photo"]
photo
subset1 = photo.iloc[:,[1,2,6,7,15,16,17,18]]
subset1
merge = pd.concat([subset1, subset2], axis=0)

new = merge.drop(['Lifetime Post Total Reach', 'comment'], axis=1)

sort = new.sort_values(by = 'like', ascending = True)

transpose = sort.transpose()

df=df.melt(id_vars=['Type','Category'],var_name='reach',value_name='count')

cast=pd.pivot_table(df,index=['Species'])
                              ['Type','category']



15
count_features = ['age', 'education-num',
       'capital-gain', 'capital-loss', 'hours-per-week']
def outliers(df_out, drop = False):
  for each_feature in df_out.columns:
      feature_data = df_out[each_feature]
      Q1 = np.percentile(feature_data, 25.) # 25th percentile of the data of the given feature
      Q3 = np.percentile(feature_data, 75.) # 75th percentile of the data of the given feature
      IQR = Q3-Q1 #Interquartile Range
      outlier_step = IQR * 1.5 #That's we were talking about above
      outliers = feature_data[~((feature_data >= Q1 - outlier_step) & 
      (feature_data <= Q3 + outlier_step))].index.tolist() 
      if not drop:
        print('For the feature {}, No of Outliers is {}'.format(each_feature, len(outliers)))
      if drop:
        df.drop(outliers, inplace = True, errors = 'ignore')
        print('Outliers from {} feature removed'.format(each_feature))

outliers(df[count_features])
outliers(df[count_features], drop=True)
duplicated = df.duplicated().sum()
df = df.drop_duplicates()
df['salary'] = df['salary'].replace(' <=50K', '0')

from sklearn.preprocessing import LabelEncoder
labelencoder=LabelEncoder()
df["workclass"]=labelencoder.fit_transform(df["workclass"])
df["education"]=labelencoder.fit_transform(df["education"])
df["maritial-status"]=labelencoder.fit_transform(df["maritial-status"])
df["occupation"]=labelencoder.fit_transform(df["occupation"])
df["relationship"]=labelencoder.fit_transform(df["relationship"])
df["race"]=labelencoder.fit_transform(df["race"])
df["sex"]=labelencoder.fit_transform(df["sex"])
df["native-country"]=labelencoder.fit_transform(df["native-country"])
df["salary"]=labelencoder.fit_transform(df["salary"])

from sklearn.naive_bayes import MultinomialNB
multinomial = MultinomialNB() 
X = df.drop(['salary'], axis=1).values
y = df['salary']
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=123)
multinomial.fit(X_train, y_train)
y_pred = multinomial.predict(X_test)
from sklearn import metrics
print("1. Accuracy Score:", metrics.accuracy_score(y_test, y_pred)*100)
print("2. Precision Score:",metrics.precision_score(y_test, y_pred))
print("3. Recall Score:", metrics.recall_score(y_test, y_pred))
print("4. f1 Score:", metrics.f1_score(y_test, y_pred))

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, y_train)
y_prediction = model.predict(X_test)
# from sklearn import metrics
print("1. Accuracy Score:", metrics.accuracy_score(y_test, y_prediction)*100)
print("2. Precision Score:",metrics.precision_score(y_test, y_prediction))
print("3. Recall Score:", metrics.recall_score(y_test, y_prediction))
print("4. f1 Score:", metrics.f1_score(y_test, y_prediction))
from sklearn.neighbors import KNeighborsClassifier
# Create KNN classifier
knn = KNeighborsClassifier(n_neighbors = 3)
# Fit the classifier to the data
knn.fit(X_train,y_train)
sn.heatmap(data = data)
plt.show()

df2 = df1.drop(df[df['thal'] == "?"].index, axis=0)
visua
df_new = df1.sort_values(by = 'age')
plt.xlabel('age')
plt.ylabel('num')
plt.plot(df_new['age'], df_new['chol'])
plt.show()


bar
target = df1['num'].value_counts()
labels = ['less severe', 'severe', 'moderate', 'high', 'very high']
# labels = target.index
count = target.values
plt.bar(labels, count)

plt.xlabel('num')
plt.ylabel('count')
plt.plot()

or 

sns.countplot(data=df1, x='num')

gender = df1['sex'].value_counts()
labels1 = ['male', 'female']
count1 = gender.values
plt.bar(labels1, count1)

plt.xlabel('sex')
plt.ylabel('count')
plt.plot()
plt.hist(df['thalac'])

scat
plt.scatter(df1['age'], df1['thalac'])
plt.xlabel('age')
plt.ylabel('thalac')
plt.title('Scattter plot')

------
plt.scatter(df1['trestbps'], df1['chol'], c=df1['num'])
plt.xlabel('trestbps')
plt.ylabel('chol')
plt.colorbar(label='num')

plt.show()

pie
plt.pie(df['num'].value_counts().values, labels= ['less severe', 'severe', 'moderate', 'high', 'very high'], autopct= "%1.1f%%")
plt.show
box
sns.boxplot(data = [df2['age'], df2['thalac'], df2['trestbps']])